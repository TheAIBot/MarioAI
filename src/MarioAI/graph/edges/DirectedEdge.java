package MarioAI.graph.edges;

import MarioAI.graph.nodes.Node;
import MarioAI.marioMovement.MovementInformation;

/** An edge representing a possible action/movement of Mario.
 * @author jesper
 *
 */
public abstract class DirectedEdge {
	public final Node source; 
	public final Node target;
	public final boolean useSuperSpeed;
	protected int hash;
	private MovementInformation moveInfo;
	
	/** Initializes a directed edge with the given parameters.
	 * @param source The source of the edge.
	 * @param target The target of the edge.
	 * @param useSuperSpeed 
	 */
	public DirectedEdge(Node source, Node target, boolean useSuperSpeed) {
		this.source = source;
		this.target = target;
		this.useSuperSpeed = useSuperSpeed;
	}
	/**Gets the max y value of the given edge.
	 * @return
	 */
	public abstract float getMaxY();
	
	/** Gets a penalty related to a given type of edge. Higher=greater penalty. Used in A*.
	 * @return
	 */
	public abstract float getWeight();
	
	/** Extra hash information used by Hasher, that depends of the edge type in question.
	 * As an example, a Jumping edge to the same target as a running edge, and from the same source, 
	 * should have a different extra hashcode. Same with jumps of different heights.
	 * @return Extra hash information to discern between different subtypes of edges.
	 */
	protected abstract byte getExtraEdgeHashcode();
		
	@Override
	public boolean equals(Object b) {
		if (b == null) {
			return false;
		}
		if (b instanceof DirectedEdge) {
			final DirectedEdge bb = (DirectedEdge) b;
			return bb.hashCode() == hashCode(); //The hash code generated by Hasher, will be the same between two edges, if and only if they are considered the same.
		} else {
			return false;
		}
	}
	
	public void setMoveInfo(MovementInformation moveInfo) {
		this.moveInfo = moveInfo;
	}
	
	public MovementInformation getMoveInfo() {
		return moveInfo;
	}
	
	@Override
	public int hashCode() {
		return hash;
	}
	
	@Override
	public String toString() {
		return "[" + source.x + " : " + source.y + "]" + 
				   " --> " + 
	          "[" + target.x + " : " + target.y + "]" +
				 " H: " + Math.round(getMaxY()) + 
				 " S: " + ((useSuperSpeed)? "t": "f") + "\n";
	}
}
